/*   Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:  */ 



















import java.util.ArrayList;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        ArrayList<Character> arr = new ArrayList<>();
        int maxLength = 0;
        
        for (int i = 0; i < s.length(); i++) {
            arr.clear();
            arr.add(s.charAt(i));
            
            for (int j = i + 1; j < s.length(); j++) {
                if (!arr.contains(s.charAt(j))) {
                    arr.add(s.charAt(j));
                } else {
                    break;
                }
            }
            
            maxLength = Math.max(maxLength, arr.size());
        }
        
        return maxLength;
    }
}
